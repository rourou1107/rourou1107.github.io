(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{273:function(t,v,s){"use strict";s.r(v);var _=s(0),e=Object(_.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"一、node-js-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、node-js-是什么"}},[t._v("#")]),t._v(" 一、Node.js 是什么")]),t._v(" "),s("p",[t._v("是一个平台。将多种技术组合起来，让 JavaScript 也能调用系统接口、开发后端应用。")]),t._v(" "),s("p",[s("strong",[t._v("注：")])]),t._v(" "),s("ol",[s("li",[t._v("Node.js 不是 web 后端框架，不能将 Node.js 与 Flask 或 Spring 对比。")]),t._v(" "),s("li",[t._v("Node.js 不是后端编程语言，不能将 Node.js 与 Python 或 PHP 对比。")])]),t._v(" "),s("h3",{attrs:{id:"二、node-js-用到了哪些技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、node-js-用到了哪些技术"}},[t._v("#")]),t._v(" 二、Node.js 用到了哪些技术")]),t._v(" "),s("ol",[s("li",[t._v("V8引擎")]),t._v(" "),s("li",[t._v("libuv")]),t._v(" "),s("li",[t._v("C/C++ 实现的 c-ares、http-parser、OpenSSL、zlib等库")])]),t._v(" "),s("h3",{attrs:{id:"三、node-js-技术架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、node-js-技术架构"}},[t._v("#")]),t._v(" 三、Node.js 技术架构")]),t._v(" "),s("p",[s("img",{attrs:{src:"/dist/nodejs/1.png",alt:"技术架构"}})]),t._v(" "),s("h3",{attrs:{id:"四、什么是-bindings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、什么是-bindings"}},[t._v("#")]),t._v(" 四、什么是 bindings")]),t._v(" "),s("ol",[s("li",[t._v("举个栗子：C/C++ 实现了一个 http_parser 库，我想要使用 JS 调用这个库，那么就需要一个中间桥梁。这个桥梁就是 bindings。")]),t._v(" "),s("li",[t._v("过程：")])]),t._v(" "),s("ul",[s("li",[t._v("Node.js 用 C++ 对 http_parser 进行封装，使他符合某些要求，封装的文件叫 http_parser_bindings.cpp")]),t._v(" "),s("li",[t._v("使用 Node.js 提供的编译工具将其编译为 .node 文件（也可以是其他方式）")]),t._v(" "),s("li",[t._v("JS 代码可以直接 require 这个 .node 文件，这样 JS 就可以调用 C++ 库")])]),t._v(" "),s("h3",{attrs:{id:"五、什么是-libuv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、什么是-libuv"}},[t._v("#")]),t._v(" 五、什么是 libuv")]),t._v(" "),s("p",[t._v("一个跨平台的异步 I/O 库，用于 TCP/UDP/DNS/文件等的异步操作")]),t._v(" "),s("h3",{attrs:{id:"六、v8-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、v8-是什么"}},[t._v("#")]),t._v(" 六、V8 是什么")]),t._v(" "),s("ol",[s("li",[t._v("将 JS 源代码变成机器代码并执行")]),t._v(" "),s("li",[t._v("维护调用栈，确保 JS 函数的执行顺序")]),t._v(" "),s("li",[t._v("内存管理，为所有对象分配内存")]),t._v(" "),s("li",[t._v("垃圾回收，重复利用无用的内存")]),t._v(" "),s("li",[t._v("实现 JS 标准库")])]),t._v(" "),s("p",[s("strong",[t._v("注：")])]),t._v(" "),s("ol",[s("li",[t._v("V8 不提供 DOM API")]),t._v(" "),s("li",[t._v("V8 执行 JS 是单线程的")]),t._v(" "),s("li",[t._v("可以开启两个线程分别执行 JS")]),t._v(" "),s("li",[t._v("V8 本身是包含多个线程，如垃圾回收为单独的线程")]),t._v(" "),s("li",[t._v("自带 event loop 但 Node.js 基于 libuv 自己做了一个")])]),t._v(" "),s("h3",{attrs:{id:"七、event-loop-执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七、event-loop-执行"}},[t._v("#")]),t._v(" 七、Event Loop 执行")]),t._v(" "),s("p",[s("img",{attrs:{src:"/dist/nodejs/2.png",alt:"技术架构"}})]),t._v(" "),s("ol",[s("li",[t._v("timers 检查计时器")]),t._v(" "),s("li",[t._v("poll 轮询，检查系统事件（大部分时间 Node.js 都停在 poll 轮询阶段来处理一些文件、网络等请求）")]),t._v(" "),s("li",[t._v("check 检查 setImmediate 回调")])])])}),[],!1,null,null,null);v.default=e.exports}}]);